Additional things added:
- Ability to handle datasets with NaN values
    We wanted the ability to handle datasets with NaN (missing) values because real-world datasets are rarely complete. 
    Missing values if left untreated, can hinder the performance and accuracy of any analysis or model. By providing functionality to address these 
    NaN values, we ensure that the dataset is prepared for analysis without loss of valuable information. Although this was not required by the assignment
    we felt that this was an important implementation to be added to make our program more applicable to real-world scenarios. 
    To handle this we we implemented a step-by-step process that allows users to select and apply a preferred method for NaN handling, enhancing the flexibility
    and control the user has over data preparation (while still not allowing them to alter the dataset directly). First, we provide a summary of NaN occurrences within 
    the dataset to help users understand the scope of missing data. Then we prompt them to choose either one of four methods to deal with the NaN values including:
        1. Keep them
        2. Interpolate
        3. Fill them with 0s
        4. Remove them
    Then we alter the dataset accordingly so that they can use it to train the pipeline. We even offer them to reset their choice. 